// playground/index.ts

// –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π (–µ—Å–ª–∏ –º—ã –Ω–∞ ESM)
import { MyPromise, MyAggregateError } from '@my-lab/promise'

console.log('üöÄ Playground started! Testing MyPromise.all...')

// --- –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–º–∏—Å—ã-–ø–æ–º–æ—â–Ω–∏–∫–∏ ---

// –ü—Ä–æ–º–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–∑–æ–ª–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è
const createSuccessPromise = <T>(value: T, delay: number) =>
	new MyPromise<T>(resolve => setTimeout(() => resolve(value), delay))

// –ü—Ä–æ–º–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —É–ø–∞–¥–µ—Ç —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è
const createFailurePromise = <T>(reason: T, delay: number) =>
	new MyPromise<never>((_, reject) => setTimeout(() => reject(reason), delay))

// –î–æ–±–∞–≤–ª—è–µ–º –≤ playground/index.ts

// --- –ö–µ–π—Å 5: –¢–µ—Å—Ç–∏—Ä—É–µ–º `race` (—É—Å–ø–µ—à–Ω—ã–π –ø–æ–±–µ–∂–¥–∞–µ—Ç) ---
console.log('\n--- Case 5: Race succeeds ---')

const case5Promises = [
	createSuccessPromise('‚ùå Slower', 1000),
	createSuccessPromise('‚úÖ Faster', 300), // –≠—Ç–æ—Ç –¥–æ–ª–∂–µ–Ω –ø–æ–±–µ–¥–∏—Ç—å
	createFailurePromise('‚ùå Slow fail', 1200),
]

MyPromise.race(case5Promises)
	.then(winner => {
		console.log('Case 5 Winner:', winner)
		// –û–∂–∏–¥–∞–µ–º: '‚úÖ Faster'
	})
	.catch(err => {
		console.error('Case 5 Failed (unexpected):', err)
	})

// --- –ö–µ–π—Å 6: –¢–µ—Å—Ç–∏—Ä—É–µ–º `race` (–æ—à–∏–±–∫–∞ –ø–æ–±–µ–∂–¥–∞–µ—Ç) ---
console.log('\n--- Case 6: Race fails ---')

const case6Promises = [
	createSuccessPromise('‚ùå Slow success', 800),
	createFailurePromise('‚úÖ Fast fail!', 200), // –≠—Ç–æ—Ç –¥–æ–ª–∂–µ–Ω –ø–æ–±–µ–¥–∏—Ç—å
]

MyPromise.race(case6Promises)
	.then(winner => {
		console.log('Case 6 Winner (unexpected):', winner)
	})
	.catch(err => {
		console.error('Case 6 Failed:', err)
		// –û–∂–∏–¥–∞–µ–º: '‚úÖ Fast fail!'
	})

// –î–æ–±–∞–≤–ª—è–µ–º –≤ playground/index.ts

// --- –ö–µ–π—Å 7: –¢–µ—Å—Ç–∏—Ä—É–µ–º `allSettled` ---
console.log('\n--- Case 7: All Settled ---')

const case7Promises = [
	createSuccessPromise('‚úÖ Success', 500),
	createFailurePromise('‚ùå Failure', 300),
	42, // –ü—Ä–æ—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
]

MyPromise.allSettled(case7Promises)
	.then(results => {
		console.log('Case 7 Results:', JSON.stringify(results, null, 2))
		/* –û–∂–∏–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫–æ–π –≤—ã–≤–æ–¥:
    [
      { "status": "fulfilled", "value": "‚úÖ Success" },
      { "status": "rejected", "reason": "‚ùå Failure" },
      { "status": "fulfilled", "value": 42 }
    ]
    */
	})
	.catch(err => {
		// –≠—Ç–æ—Ç –±–ª–æ–∫ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è
		console.error('Case 7 Failed (unexpected):', err)
	})

// playground/index.ts

// ... (–∏–º–ø–æ—Ä—Ç—ã –∏ —Ö–µ–ª–ø–µ—Ä—ã createSuccessPromise, createFailurePromise) ...

// –í–ê–ñ–ù–û: –ù–∞–º –Ω—É–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –Ω–∞—à –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è
// –ï—Å–ª–∏ –æ–Ω –Ω–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è, —Ç–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ .name –∏ .message

// --- –ö–µ–π—Å 8: –¢–µ—Å—Ç–∏—Ä—É–µ–º `any` (–±—ã—Å—Ç—Ä—ã–π —É—Å–ø–µ—Ö –ø–æ–±–µ–∂–¥–∞–µ—Ç) ---
console.log('\n--- Case 8: `any` succeeds ---')

const case8Promises = [
	createFailurePromise('‚ùå Slow fail', 1000),
	createSuccessPromise('‚úÖ Faster success', 300), // –≠—Ç–æ—Ç –¥–æ–ª–∂–µ–Ω –ø–æ–±–µ–¥–∏—Ç—å
	createSuccessPromise('‚ùå Slower success', 1200),
]

MyPromise.any(case8Promises)
	.then(winner => {
		console.log('Case 8 Winner:', winner)
		// –û–∂–∏–¥–∞–µ–º: '‚úÖ Faster success'
	})
	.catch(err => {
		console.error('Case 8 Failed (unexpected):', err)
	})

// --- –ö–µ–π—Å 9: –¢–µ—Å—Ç–∏—Ä—É–µ–º `any` (–≤—Å–µ –ø–∞–¥–∞—é—Ç) ---
console.log('\n--- Case 9: `any` fails (all rejected) ---')

const case9Promises = [
	createFailurePromise('‚ùå Fail 1', 200),
	createFailurePromise('‚ùå Fail 2', 500), // –≠—Ç–æ—Ç —É–ø–∞–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º
]

MyPromise.any(case9Promises)
	.then(winner => {
		console.log('Case 9 Winner (unexpected):', winner)
	})
	.catch(err => {
		console.error('Case 9 Failed as expected. Checking error type...')
		if (err instanceof MyAggregateError) {
			console.log('‚úÖ Correct error type: AggregateError')
			console.log('Error message:', err.message) // 'All promises were rejected'
			console.log('Errors array:', err.errors) // ['‚ùå Fail 1', '‚ùå Fail 2']
		} else {
			console.error('‚ùå WRONG error type:', err)
		}
	})

// --- –ö–µ–π—Å 10: –¢–µ—Å—Ç–∏—Ä—É–µ–º `any` —Å –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º ---
console.log('\n--- Case 10: `any` with empty array ---')

MyPromise.any([])
	.then(winner => {
		console.log('Case 10 Winner (unexpected):', winner)
	})
	.catch(err => {
		console.error('Case 10 Failed as expected.')
		if (err instanceof MyAggregateError) {
			console.log('‚úÖ Correct error type for empty array: AggregateError')
		}
	})
