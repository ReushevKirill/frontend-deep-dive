// playground/index.ts

// –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π (–µ—Å–ª–∏ –º—ã –Ω–∞ ESM)
import { MyPromise } from '@my-lab/promise';

console.log('üöÄ Playground started! Testing MyPromise.all...');

// --- –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–º–∏—Å—ã-–ø–æ–º–æ—â–Ω–∏–∫–∏ ---

// –ü—Ä–æ–º–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–∑–æ–ª–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è
const createSuccessPromise = <T>(value: T, delay: number) =>
  new MyPromise<T>(resolve => setTimeout(() => resolve(value), delay));

// –ü—Ä–æ–º–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —É–ø–∞–¥–µ—Ç —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è
const createFailurePromise = <T>(reason: T, delay: number) =>
  new MyPromise<never>((_, reject) => setTimeout(() => reject(reason), delay));


// --- –ö–µ–π—Å 1: –í—Å–µ –ø—Ä–æ–º–∏—Å—ã —É—Å–ø–µ—à–Ω—ã ---
console.log('\n--- Case 1: All promises succeed ---');

const case1Promises = [
  createSuccessPromise('‚úÖ First', 1000),
  createSuccessPromise('‚úÖ Second', 500), // –≠—Ç–æ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —Ä–∞–Ω—å—à–µ
  42, // –ü—Ä–æ—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  Promise.resolve('‚úÖ Native Promise'), // –ù–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–∏—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
];

MyPromise.all(case1Promises)
  .then(results => {
    console.log('Case 1 Success:', results);
    // –û–∂–∏–¥–∞–µ–º: ['‚úÖ First', '‚úÖ Second', 42, '‚úÖ Native Promise']
    // –ü–æ—Ä—è–¥–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è!
  })
  .catch(err => {
    console.error('Case 1 Failed (unexpected):', err);
  });


// --- –ö–µ–π—Å 2: –û–¥–∏–Ω –∏–∑ –ø—Ä–æ–º–∏—Å–æ–≤ –ø–∞–¥–∞–µ—Ç ---
console.log('\n--- Case 2: One promise fails ---');

const case2Promises = [
  createSuccessPromise('‚úÖ Success 1', 800),
  createFailurePromise('‚ùå ERROR!', 400), // –≠—Ç–æ—Ç —É–ø–∞–¥–µ—Ç —Ä–∞–Ω—å—à–µ, —á–µ–º –ø–µ—Ä–≤—ã–π –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è
  createSuccessPromise('‚úÖ Success 2', 1200), // –≠—Ç–æ—Ç –¥–∞–∂–µ –Ω–µ —É—Å–ø–µ–µ—Ç –∑–∞—Ä–µ–∑–æ–ª–≤–∏—Ç—å—Å—è
];

MyPromise.all(case2Promises)
  .then(results => {
    console.log('Case 2 Success (unexpected):', results);
  })
  .catch(err => {
    console.error('Case 2 Failed:', err);
    // –û–∂–∏–¥–∞–µ–º: '‚ùå ERROR!'
  });


// --- –ö–µ–π—Å 3: –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ ---
console.log('\n--- Case 3: Empty array ---');

MyPromise.all([])
  .then(results => {
    console.log('Case 3 Success:', results);
    // –û–∂–∏–¥–∞–µ–º: []
  })
  .catch(err => {
    console.error('Case 3 Failed (unexpected):', err);
  });


// --- –ö–µ–π—Å 4: –ú–∞—Å—Å–∏–≤ —Ç–æ–ª—å–∫–æ —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ (–Ω–µ –ø—Ä–æ–º–∏—Å–∞–º–∏) ---
console.log('\n--- Case 4: Array of values only ---');

MyPromise.all([1, 'hello', true])
  .then(results => {
    console.log('Case 4 Success:', results);
    // –û–∂–∏–¥–∞–µ–º: [1, 'hello', true]
  })
  .catch(err => {
    console.error('Case 4 Failed (unexpected):', err);
  });
